// Generated by CoffeeScript 1.6.3
var Email, MailFolder, Mailbox, async;

async = require('async');

Email = require('../models/email');

Mailbox = require('../models/mailbox');

MailFolder = require('../models/mailfolder');

module.exports = {
  getMail: function(req, res, next, id) {
    var _this = this;
    return Email.find(id, function(err, mail) {
      if (err) {
        return next(err);
      } else if (mail == null) {
        return res.send({
          error: "mail not found"
        }, 404);
      } else {
        req.mail = mail;
        return next();
      }
    });
  },
  show: function(req, res, next) {
    return res.send(req.mail);
  },
  update: function(req, res, next) {
    var body, flagsChanged, markRead, newflags,
      _this = this;
    markRead = false;
    body = req.body;
    flagsChanged = req.mail.changedFlags(body.flags);
    newflags = body.flags;
    delete body.flags;
    return req.mail.updateAttributes(body, function(err) {
      if (err) {
        return next(err);
      } else {
        if (!flagsChanged) {
          return res.send({
            success: true
          }, 200);
        }
        return Mailbox.find(req.mail.mailbox, function(err, mailbox) {
          if (err) {
            return next(err);
          }
          return mailbox.syncOneMail(req.mail, newflags, function(err) {
            if (err) {
              return next(err);
            }
            return res.send({
              success: true
            }, 200);
          });
        });
      }
    });
  },
  destroy: function(req, res, next) {
    var _this = this;
    return Mailbox.find(req.mail.mailbox, function(err, mailbox) {
      if (err) {
        return next(err);
      }
      return mailbox.syncOneMail(req.mail, ["\\Deleted"], function(err) {
        if (err) {
          return next(err);
        }
        return req.mail.destroy(function(err) {
          if (err) {
            return next(err);
          }
          return res.send(204);
        });
      });
    });
  },
  byFolder: function(req, res, next) {
    var num, query, timestamp;
    num = parseInt(req.params.num);
    if (req.params.timestamp && req.params.timestamp !== 'undefined') {
      timestamp = parseInt(req.params.timestamp);
    } else {
      timestamp = {};
    }
    query = {
      startkey: [req.params.folderId, timestamp],
      endkey: [req.params.folderId],
      limit: num,
      skip: timestamp ? 1 : 0,
      descending: true
    };
    return Email.fromFolderByDate(query, function(err, mails) {
      if (err) {
        return next(err);
      } else {
        return res.send(mails);
      }
    });
  },
  rainbow: function(req, res, next) {
    var limit, timestamp;
    limit = parseInt(req.params.limit);
    if (req.params.timestamp && req.params.timestamp !== 'undefined') {
      timestamp = parseInt(req.params.timestamp);
    } else {
      timestamp = {};
    }
    return MailFolder.byType('INBOX', function(err, inboxes) {
      var outMails;
      if (err) {
        return next(err);
      }
      outMails = [];
      return async.each(inboxes, function(inbox, callback) {
        var query;
        query = {
          startkey: [inbox.id, timestamp],
          endkey: [inbox.id],
          limit: limit,
          descending: true
        };
        return Email.fromFolderByDate(query, function(err, mails) {
          var mail, _i, _len;
          if (err) {
            console.log(err);
            return callback(err);
          } else {
            for (_i = 0, _len = mails.length; _i < _len; _i++) {
              mail = mails[_i];
              outMails.push(mail);
            }
            return callback(null);
          }
        });
      }, function(err) {
        var i;
        if (err) {
          return next(err);
        }
        outMails.sort(function(a, b) {
          return b.dateValueOf - a.dateValueOf;
        });
        i = 0;
        while (outMails.length < i && outMails[i].dateValueOf > timestamp) {
          i++;
        }
        return res.send(outMails.slice(i, +(i + 99) + 1 || 9e9));
      });
    });
  },
  getAttachment: function(req, res, next) {
    var stream;
    stream = req.mail.getFile(req.params.filename, function(err) {
      if (err) {
        return next(err);
      }
    });
    return stream.pipe(res);
  }
};
