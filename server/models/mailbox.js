// Generated by CoffeeScript 1.6.3
var LogMessage, Mail, MailFolder, MailGetter, MailSender, Mailbox, americano, async, queue;

queue = require('../lib/queue');

async = require('async');

americano = require('americano-cozy');

Mail = require('./email');

MailFolder = require('./mailfolder');

MailSender = require('../lib/mail_sender');

MailGetter = require('../lib/mail_getter');

LogMessage = require('../lib/logmessage');

module.exports = Mailbox = americano.getModel('Mailbox', {
  name: String,
  config: {
    type: Number,
    "default": 0
  },
  newMessages: {
    type: Number,
    "default": 0
  },
  createdAt: {
    type: Date,
    "default": Date
  },
  login: String,
  password: String,
  smtpServer: String,
  smtpSendAs: String,
  smtpSsl: {
    type: Boolean,
    "default": true
  },
  smtpPort: {
    type: Number,
    "default": 465
  },
  imapServer: String,
  imapPort: String,
  imapSecure: {
    type: Boolean,
    "default": true
  },
  imapLastSync: {
    type: Date,
    "default": 0
  },
  imapLastFectechDate: {
    type: Date,
    "default": 0
  },
  imapLastFetchedId: {
    type: Number,
    "default": 0
  },
  checked: {
    type: Boolean,
    "default": true
  },
  color: {
    type: String,
    "default": "#0099FF"
  },
  statusMsg: {
    type: String,
    "default": "Waiting for import"
  },
  activated: {
    type: Boolean,
    "default": false
  },
  status: {
    type: String,
    "default": "freezed"
  },
  mailsToImport: {
    type: Number,
    "default": 0
  }
});

Mailbox.folderQueues = {};

Mailbox.prototype.log = function(msg) {
  return console.info("" + this + " " + ((msg != null ? msg.stack : void 0) || msg));
};

Mailbox.prototype.toString = function() {
  return "[Mailbox " + this.name + " " + this.id + "]";
};

Mailbox.findByEmail = function(email, callback) {
  return Mailbox.request('byEmail', {
    key: email
  }, function(err, boxes) {
    if (err) {
      return callback(err);
    } else {
      return callback(null, boxes[0] || null);
    }
  });
};

Mailbox.prototype.remove = function(callback) {
  var _this = this;
  this.log("destroying box...");
  return async.series([
    function(cb) {
      return Mail.requestDestroy("bymailbox", {
        key: _this.id
      }, cb);
    }, function(cb) {
      return MailFolder.requestDestroy("bymailbox", {
        key: _this.id
      }, cb);
    }, function(cb) {
      return LogMessage.destroy(_this, cb);
    }
  ], function(err) {
    _this.log("destroying finished...");
    if (err) {
      _this.log(err);
    }
    return _this.destroy(callback);
  });
};

Mailbox.prototype.reset = function(callback) {
  var _this = this;
  return async.parallel([
    function(cb) {
      return Mail.requestDestroy("bymailbox", {
        key: _this.id
      }, cb);
    }, function(cb) {
      return MailFolder.requestDestroy("bymailbox", {
        key: _this.id
      }, cb);
    }, function(cb) {
      return LogMessage.destroy(_this, cb);
    }
  ], function(err) {
    _this.log("reset finished...");
    if (err) {
      _this.log(err);
      return callback(err);
    } else {
      return callback();
    }
  });
};

Mailbox.prototype.importStarted = function(callback) {
  var data,
    _this = this;
  data = {
    status: "import_preparing",
    statusMsg: "import started"
  };
  return this.updateAttributes(data, function(error) {
    if (error) {
      return callback(error);
    } else {
      return LogMessage.createImportStartedInfo(_this, callback);
    }
  });
};

Mailbox.prototype.importSuccessfull = function(callback) {
  var data,
    _this = this;
  data = {
    status: "imported",
    statusMsg: "import complete"
  };
  return this.updateAttributes(data, function(error) {
    if (error) {
      return callback(error);
    } else {
      return LogMessage.createImportSuccess(_this, callback);
    }
  });
};

Mailbox.prototype.importFailed = function(err, callback) {
  var data,
    _this = this;
  this.log(err);
  data = {
    status: "import_failed",
    statusMsg: "import failed" + err.message
  };
  return this.updateAttributes(data, function(error) {
    if (error) {
      return callback(error);
    } else {
      return LogMessage.createImportFailed(_this, callback);
    }
  });
};

Mailbox.prototype.progress = function(progress, callback) {
  var data,
    _this = this;
  if (this.status === 'imported') {
    return;
  }
  data = {
    status: "importing",
    statusMsg: "importing " + progress + " %"
  };
  return this.updateAttributes(data, function(error) {
    return LogMessage.createImportProgressInfo(_this, progress, callback);
  });
};

Mailbox.prototype.boxDeleting = function(callback) {
  var data,
    _this = this;
  data = {
    status: "deleting",
    statusMsg: "deletion in progress..."
  };
  return this.updateAttributes(data, function(error) {
    if (error) {
      return callback(error);
    } else {
      return callback();
    }
  });
};

Mailbox.prototype.getMailSender = function(callback) {
  return callback(null, new MailSender(this, this.password));
};

Mailbox.prototype.getMailGetter = function(callback) {
  var mg;
  mg = new MailGetter(this, this.password);
  return mg.connect(function(err) {
    if (err) {
      return callback(err);
    } else {
      return callback(null, mg);
    }
  });
};

Mailbox.prototype.sendMail = function(data, callback) {
  return this.getMailSender(function(err, sender) {
    if (err) {
      return callback(err);
    }
    return sender.sendMail(data(function(err) {
      if (err) {
        this.log("Sending mail failed");
        return callback(err);
      } else {
        this.log("Message sent successfully!");
        return callback();
      }
    }));
  });
};

Mailbox.prototype.setupImport = function(callback) {
  var _this = this;
  return this.importStarted(function() {
    return _this.getMailGetter(function(err, getter) {
      if (err) {
        return _this.importFailed(err, callback);
      }
      return getter.listFolders(function(err, folders) {
        var folder, setupImportOneFolder, _i, _len;
        if (err) {
          return _this.importFailed(err, callback);
        }
        for (_i = 0, _len = folders.length; _i < _len; _i++) {
          folder = folders[_i];
          folder.mailbox = _this.id;
        }
        setupImportOneFolder = function(folder, cb) {
          if (folder.path !== "[Gmail]/All Mail") {
            return MailFolder.create(folder, function(err, folder) {
              return folder.setupImport(getter, function(err) {
                if (err) {
                  _this.log(err);
                }
                return cb();
              });
            });
          } else {
            return cb();
          }
        };
        return async.eachSeries(folders, setupImportOneFolder, function(err) {
          var data;
          data = {
            activated: true,
            status: "importing"
          };
          return _this.updateAttributes(data, function(err) {
            if (err) {
              return _this.importFailed(err, callback);
            }
            return getter.logout(callback);
          });
        });
      });
    });
  });
};

Mailbox.prototype.doImport = function(callback) {
  var _this = this;
  if (callback == null) {
    callback = function() {};
  }
  Mailbox.folderQueues[this.id] = {};
  this.log("Start import");
  return this.getMailGetter(function(err, getter) {
    if (err) {
      return callback(err);
    }
    return MailFolder.findByMailbox(_this.id, function(err, folders) {
      var done, folder, oldPercent, percent, progressHandler, total, _i, _j, _len, _len1, _ref;
      if (err) {
        return _this.manageErr(err, callback);
      }
      if (!folders) {
        folders = [];
      }
      total = 0;
      for (_i = 0, _len = folders.length; _i < _len; _i++) {
        folder = folders[_i];
        total += ((_ref = folder.mailsToBe) != null ? _ref.length : void 0) || 0;
      }
      _this.log("total mails to import: " + total);
      percent = 0;
      oldPercent = 0;
      done = 0;
      progressHandler = function() {
        done++;
        percent = Math.floor(100 * done / total);
        if (percent !== oldPercent) {
          oldPercent = percent;
          return _this.progress(percent);
        }
      };
      for (_j = 0, _len1 = folders.length; _j < _len1; _j++) {
        folder = folders[_j];
        Mailbox.folderQueues[_this.id][folder.id] = folder.pushFetchTasks(getter, progressHandler);
      }
      return async.eachSeries(folders, function(folder, cb) {
        var _ref1;
        _this.log('import:' + folder.id);
        _this.log('import:' + folder.name);
        if (((_ref1 = folder.mailsToBe) != null ? _ref1.length : void 0) > 0) {
          return getter.openBox(folder.path, function(err) {
            if (err) {
              return _this.manageErr(err, cb);
            }
            Mailbox.folderQueues[_this.id][folder.id].on('success', function() {
              return progressHandler();
            });
            return Mailbox.folderQueues[_this.id][folder.id].run(function(err) {
              if (err) {
                return _this.manageErr(err, cb);
              }
              return getter.closeBox(function(err) {
                if (err) {
                  return _this.manageErr(err, cb);
                }
                return cb();
              });
            });
          });
        } else {
          return cb();
        }
      }, function(error) {
        Mailbox.folderQueues[_this.id] = {};
        if (error) {
          _this.log('An error occured while importing mails');
          console.log(error);
          return callback(error, done);
        } else {
          return async.eachSeries(folders, function(folder, cb) {
            return folder.updateAttributes({
              mailsToBe: null
            }, function(err) {
              if (err) {
                _this.log(err);
              }
              return cb(null, done);
            });
          }, function(err) {
            if (err) {
              return _this.manageErr(err, callback);
            }
            return getter.logout(function(err) {
              if (err) {
                return _this.manageErr(err, callback);
              }
              return _this.importSuccessfull(function(err) {
                if (err) {
                  return _this.manageErr(err, callback);
                }
                return callback();
              });
            });
          });
        }
      });
    });
  });
};

Mailbox.prototype.manageErr = function(err, callback) {
  this.log(err);
  return callback(err);
};

Mailbox.prototype.fullImport = function(callback) {
  var _this = this;
  return this.setupImport(function(err) {
    if (err) {
      _this.log(err);
      return callback(err);
    } else {
      return _this.doImport(callback);
    }
  });
};

Mailbox.prototype.stopImport = function(callback) {
  var folder, _ref;
  if (callback == null) {
    callback = function() {};
  }
  _ref = Mailbox.folderQueues[this.id];
  for (folder in _ref) {
    queue = _ref[folder];
    if ((queue != null ? queue.empty : void 0) != null) {
      queue.empty();
    }
  }
  return callback();
};

Mailbox.prototype.syncOneMail = function(mail, newflags, callback) {
  return this.getMailGetter(function(err, getter) {
    if (err) {
      return callback(err);
    }
    return MailFolder.find(mail.folder, function(err, folder) {
      if (err) {
        return callback(err);
      }
      return folder.syncOneMail(getter, mail, newflags, function(err, folder) {
        if (err) {
          return callback(err);
        }
        return getter.logout(function(err) {
          if (err) {
            return callback(err);
          }
          return callback(null, folder);
        });
      });
    });
  });
};
