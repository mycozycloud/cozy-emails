// Generated by CoffeeScript 1.6.3
var Email, EmailGetter, americano, async, fs,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

async = require('async');

EmailGetter = require('../lib/mail_getter');

americano = require('americano-cozy');

module.exports = Email = americano.getModel('Email', {
  mailbox: String,
  folder: String,
  idRemoteEmailbox: String,
  remoteUID: String,
  createdAt: {
    type: Number,
    "default": 0
  },
  dateValueOf: {
    type: Number,
    "default": 0
  },
  date: {
    type: Date,
    "default": 0
  },
  headersRaw: String,
  raw: String,
  priority: String,
  subject: String,
  from: String,
  to: String,
  cc: String,
  text: String,
  html: String,
  flags: Object,
  read: {
    type: Boolean,
    "default": false
  },
  flagged: {
    type: Boolean,
    "default": false
  },
  hasAttachments: {
    type: Boolean,
    "default": false
  },
  inReplyTo: String,
  references: String,
  _attachments: Object
});

Email.fromMailbox = function(params, callback) {
  return Email.request("byMailbox", params, callback);
};

Email.dateId = function(params, callback) {
  return Email.request("dateId", params, callback);
};

Email.fromMailboxByDate = function(params, callback) {
  return Email.request("dateByMailbox", params, callback);
};

Email.fromFolderByDate = function(params, callback) {
  return Email.request('folderDate', params, callback);
};

Email.prototype.saveAttachments = function(attachments, callback) {
  var _this = this;
  if (!((attachments != null) && attachments.length > 0)) {
    return callback(null);
  }
  return async.each(attachments, function(attachment, callback) {
    var fileName, params;
    params = {
      cid: attachment.contentId || 'null',
      fileName: attachment.fileName,
      contentType: attachment.contentType || '',
      length: attachment.length || 0,
      checksum: attachment.checksum || '',
      mailbox: _this.mailbox,
      mailId: _this.id
    };
    fileName = "/tmp/" + attachment.fileName;
    return fs.writeFile(fileName, attachment.content, function(err) {
      if (err) {
        return callback(err);
      }
      return _this.attachFile(fileName, params, function(error) {
        if (error) {
          console.log(error);
        }
        return fs.unlink(fileName, function(err) {
          if (err) {
            console.log(err);
          }
          return callback(error || err);
        });
      });
    });
  }, function(err) {
    if (err) {
      console.log(err);
    }
    return callback(err);
  });
};

Email.prototype.remove = function(getter, callback) {
  return getter.addFlags(this.idRemoteEmailbox, ['\\Deleted'], function(err) {
    if (err) {
      return callback(err);
    }
    return this.destroy(callback);
  });
};

Email.prototype.updateAndSync = function(attributes, callback) {
  var needSync,
    _this = this;
  needSync = this.changedFlags(attributes.flags);
  return this.updateAttributes(attributes, function(err) {
    if (err) {
      return callback(err);
    }
    if (needSync) {
      return _this.sync(callback);
    } else {
      return callback(null);
    }
  });
};

Email.prototype.changedFlags = function(newflags) {
  var newflagged, newseen, oldflagged, oldseen;
  oldseen = __indexOf.call(this.flags, '\\Seen') >= 0;
  oldflagged = __indexOf.call(this.flags, '\\Flagged') >= 0;
  newseen = __indexOf.call(newflags, '\\Seen') >= 0;
  newflagged = __indexOf.call(newflags, '\\Flagged') >= 0;
  return oldseen !== newseen || oldflagged !== newflagged;
};

Email.prototype.updateFlags = function(flags, callback) {
  if (callback == null) {
    callback = function() {};
  }
  if (this.changedFlags(flags)) {
    return this.updateAttributes({
      flags: flags
    }, callback);
  } else {
    return callback(null);
  }
};

Email.prototype.toString = function(callback) {
  return "mail: " + this.mailbox + " " + this.id;
};
