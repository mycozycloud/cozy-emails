// Generated by CoffeeScript 1.6.3
var Queue, events, log,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

events = require('events');

log = require('printit')({
  date: true,
  prefix: 'mail queue'
});

Queue = (function(_super) {
  __extends(Queue, _super);

  function Queue() {
    this.empty = __bind(this.empty, this);
    this.size = __bind(this.size, this);
    this.queue = [];
  }

  Queue.prototype.push = function(task, run) {
    if (run == null) {
      run = true;
    }
    this.queue.push(task);
    if (run && !this.isRunning) {
      return this.run();
    }
  };

  Queue.prototype.get = function(index) {
    return this.queue[index];
  };

  Queue.prototype.run = function(callback) {
    var execTask,
      _this = this;
    this.emit('start');
    this.isRunning = true;
    execTask = function() {
      var task;
      if (_this.size() > 0) {
        task = _this.queue.pop();
        return task(_this, function(err) {
          if (err) {
            _this.isRunning = false;
            _this.emit('error');
            return callback(err);
          } else {
            return process.nextTick(execTask);
          }
        });
      } else {
        _this.isRunning = false;
        _this.emit('end');
        return callback();
      }
    };
    return execTask();
  };

  Queue.prototype.size = function() {
    return this.queue.length;
  };

  Queue.prototype.empty = function() {
    return this.queue = [];
  };

  return Queue;

})(events.EventEmitter);

module.exports = function() {
  return new Queue();
};
